/*
 * Math Operations API
 *
 * API for performing simple arithmetic operations (add, subtract, multiply, divide). 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MathResponse : IEquatable<MathResponse>
    { 
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [Required]

        [DataMember(Name="requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>

        [DataMember(Name="operation")]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>

        [DataMember(Name="x")]
        public decimal? X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>

        [DataMember(Name="y")]
        public decimal? Y { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [Required]

        [DataMember(Name="result")]
        public decimal Result { get; set; }

        /// <summary>
        /// Gets or Sets FromCache
        /// </summary>

        [DataMember(Name="fromCache")]
        public bool? FromCache { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [Required]

        [DataMember(Name="timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MathResponse {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  FromCache: ").Append(FromCache).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MathResponse)obj);
        }

        /// <summary>
        /// Returns true if MathResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of MathResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MathResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                ) && 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.Equals(other.Operation)
                ) && 
                (
                    X == other.X ||
                    X != null &&
                    X.Equals(other.X)
                ) && 
                (
                    Y == other.Y ||
                    Y != null &&
                    Y.Equals(other.Y)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) && 
                (
                    FromCache == other.FromCache ||
                    FromCache != null &&
                    FromCache.Equals(other.FromCache)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                    if (Operation != null)
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                    if (X != null)
                    hashCode = hashCode * 59 + X.GetHashCode();
                    if (Y != null)
                    hashCode = hashCode * 59 + Y.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (FromCache != null)
                    hashCode = hashCode * 59 + FromCache.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MathResponse left, MathResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MathResponse left, MathResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
